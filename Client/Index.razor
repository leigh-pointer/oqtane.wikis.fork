@using Oqtane.Wiki.Services
@using Oqtane.Wiki.Models
@using Oqtane.Wiki.Shared

@namespace Oqtane.Wiki
@inherits ModuleBase
@inject IWikiService WikiService
@inject NavigationManager NavigationManager
@inject ISettingService SettingService
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

<div class="container">
    <div class="row mb-1 justify-content-center">
        <div class="col-sm-12 col-md-9 col-lg-6">
            <div class="input-group">
                <NavLink class="btn btn-primary" href="@NavigateUrl()">@Localizer["Home"]</NavLink>
                <input class="form-control" @bind="@_search" placeholder="@SharedLocalizer["Search"]..." />
                <button type="button" class="btn btn-primary" @onclick="Search">@SharedLocalizer["Search"]</button>
                <button type="button" class="btn btn-secondary" @onclick="Reset">@SharedLocalizer["Reset"]</button>
                <a href="/api/wiki/rss/@ModuleState.ModuleId" target="_new" class="btn btn-info">@Localizer["RSS"]</a>
            </div>
        </div>
    </div>
</div>
<br />
@if (_wikicontents != null)
{
    @if (_wikicontents.Any())
    {
        <h3>@Localizer["Results"]</h3>
        <Pager Format="Grid" Items="@_wikicontents" Columns="1">
            <Row>
                <h4><a href="@FormatUrl(context.WikiPageId, context.WikiPage.Title)">@context.WikiPage.Title</a></h4>
                <p>@((MarkupString)Common.CreateSummary(context.Content, 200, _search))</p>
            </Row>
        </Pager>
    }
    else
    {
        <div class="text-center">@Localizer["Message.NoResults"]</div>
    }
}
else
{
    <div class="text-center">
        <ActionLink Action="Edit" Parameters="@("id=" + _id.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="Edit" />
    </div>
    @if (_wikicontent != null)
    {
        <h2>@_wikicontent.WikiPage.Title</h2>
        <hr />
        <p>@((MarkupString)(Utilities.FormatContent(_wikicontent.Content, PageState.Alias, "render")))</p>
        <hr />
        <div>@Localizer["LastEdited"] <b>@_wikicontent.CreatedOn</b> @Localizer["By"] <b>@_wikicontent.CreatedBy</b></div>

        @if (!string.IsNullOrEmpty(_wikicontent.WikiPage.Tags))
        {
            <br />
            <div>@Localizer["Tags"]:
            @foreach (var tag in _wikicontent.WikiPage.Tags.Split(','))
            {
                <a href="@PageState.Page.Path?tag=@tag" class="badge rounded-pill bg-primary me-2">@tag</a>
            }
            </div>
        }

        if (_wikicontent.Links.Count != 0)
        {
            <br />
            <div>@Localizer["Links"]:
            @foreach (var link in _wikicontent.Links)
            {
                <a href="@FormatUrl(link.Key, link.Value)" class="me-2">@link.Value</a>
            }
            </div>
        }
    }
    else
    {
        <br />
        if (_id != -1)
        {
            <div class="text-center">@Localizer["Message.NotFound"]</div>
        }
        else
        {
            <div class="text-center">@Localizer["Message.Initialize"]</div>
        }
    }
}
<br />

@code {
    public override string UrlParametersTemplate => "/{id}/{slug}";

    private List<WikiContent> _wikicontents;
    private string _search;

    private int _id = -1;
    private WikiContent _wikicontent;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _wikicontents = null;

            if (PageState.QueryString.ContainsKey("tag"))
            {
                _wikicontents = await WikiService.GetWikiContentsAsync(ModuleState.ModuleId, "", PageState.QueryString["tag"]);
                SetPageTitle(Localizer["Results"]);
                AddHeadContent($"<meta name=\"description\" content=\"{Localizer["Results"]}\" />");
            }
            else
            {
                if (!string.IsNullOrEmpty(PageState.UrlParameters) && UrlParameters.ContainsKey("id"))
                {
                    _id = int.Parse(UrlParameters["id"]);
                    _wikicontent = await WikiService.GetWikiContentAsync(ModuleState.ModuleId, _id);
                }
                else
                {
                    _id = int.Parse(SettingService.GetSetting(ModuleState.Settings, "WikiPageId", "-1"));
                    if (_id != -1)
                    {
                        _wikicontent = await WikiService.GetWikiContentAsync(ModuleState.ModuleId, _id);
                        if (_wikicontent == null)
                        {
                            _id = -1;
                        }
                    }
                }
            }

            if (_wikicontent != null)
            {
                SetPageTitle(_wikicontent.WikiPage.Title);
                AddHeadContent($"<meta name=\"description\" content=\"{Common.CreateSummary(_wikicontent.Content, 200, "")}\" />");
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading WikiContent {Error}", ex.Message);
        }
    }

    private string FormatUrl(int WikiPageId, string Title)
    {
        return NavigateUrl(PageState.Page.Path, AddUrlParameters(WikiPageId, Common.FormatSlug(Title)));
    }

    private async Task Search()
    {
        try
        {
            if (!string.IsNullOrEmpty(_search))
            {
                _wikicontents = await WikiService.GetWikiContentsAsync(ModuleState.ModuleId, _search, "");
                SetPageTitle(Localizer["Results"]);
                AddHeadContent($"<meta name=\"description\" content=\"{Localizer["Results"]}\" />");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Searching WikiContent {Error}", ex.Message);
            AddModuleMessage(Localizer["Error.Searching"], MessageType.Error);
        }
    }

    private void Reset()
    {
        _search = "";
        _wikicontents = null;
        StateHasChanged();
    }
}
